import enum
from datetime import datetime
from typing import Any

from pydantic import BaseModel, Field

from kys_in_rest.core.tg_utils import tg_escape

hops = [
    "Cascade NZ",
    "Citra Cryo",
    "Citra",
    "Galaxy",
    "Green Bullet",
    "Hopburst Nectaron",
    "Mosaic CRYO",
    "Mosaic",
    "Nectaron",
    "Pacifica Amplifire",
    "Rakau",
    "Superdelic",
    "Vic Secret",
]

fruits = [
    ("–∞–±—Ä–∏–∫–æ—Å", "–∞–±—Ä–∏–∫–æ—Å"),
    ("–∞–ø–µ–ª—å—Å–∏–Ω", "–∞–ø–µ–ª—å—Å–∏–Ω"),
    ("–∞–Ω–∞–Ω–∞—Å", "–∞–Ω–∞–Ω–∞—Å"),
    ("–º–∞–Ω–¥–∞—Ä–∏–Ω", "–º–∞–Ω–¥–∞—Ä–∏–Ω"),
    ("–≤–∏—à–Ω", "–≤–∏—à–Ω—è"),
    ("–≥—Ä—É—à", "–≥—Ä—É—à–∞"),
    ("–µ–∂–µ–≤–∏–∫", "–µ–∂–µ–≤–∏–∫–∞"),
    ("–∫–∞—Ä–∞–º–µ–ª", "–∫–∞—Ä–∞–º–µ–ª—å"),
    ("–∫–æ—Ä–∏—Ü", "–∫–æ—Ä–∏—Ü–∞"),
    ("–ª–∏—á", "–ª–∏—á–∏"),
    ("–º–∞–ª–∏–Ω", "–º–∞–ª–∏–Ω–∞"),
    ("–º–∞–Ω–≥", "–º–∞–Ω–≥–æ"),
    ("–º–∞—Ä–∞–∫—É–π", "–º–∞—Ä–∞–∫—É–π—è"),
    ("–æ–±–ª–µ–ø–∏—Ö", "–æ–±–ª–µ–ø–∏—Ö–∞"),
    ("–ø–µ—á–µ–Ω", "–ø–µ—á–µ–Ω—å–µ"),
    ("—Ä–µ–≤–µ–Ω", "—Ä–µ–≤–µ–Ω—å"),
    ("—Ä–æ–∑", "—Ä–æ–∑–∞"),
    ("—á–µ—Ä–Ω —Å–º–æ—Ä–æ–¥–∏–Ω", "—á–µ—Ä–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞"),
    ("—á–µ—Ä–Ω–∏–∫", "—á–µ—Ä–Ω–∏–∫–∞"),
    ("–≤–∞–Ω–∏–ª", "–≤–∞–Ω–∏–ª—å"),
    ("–º–µ–ª–∏—Å—Å", "–º–µ–ª–∏—Å—Å–∞"),
    ("raspberry", "–º–∞–ª–∏–Ω–∞"),
    ("passion fruit", "–º–∞—Ä–∞–∫—É–π—è"),
    ("melissa", "–º–µ–ª–∏—Å—Å–∞"),
    ("–∫–∞–ª–∞–º–∞–Ω—Å", "–∫–∞–ª–∞–º–∞–Ω—Å–∏"),
]


class BeerStyleName(enum.StrEnum):
    TIPA = "TIPA"
    DIPA = "DIPA"
    NE_IPA = "NE IPA"
    IPA = "IPA"
    MEAD = "Mead"
    SOUR_ALE = "Sour Ale"
    BERLINER = "Berliner"
    MILK_STOUT = "Milk Stout"
    WEIZEN = "Weizen"
    LAGER = "Lager"
    HELLES = "Helles"
    NON_ALCO_LAGER = "Non-Alco Lager"


class BeerStyle(BaseModel):
    name: BeerStyleName | str
    hops: list[str] = Field(default_factory=list)
    fruits: list[str] = Field(default_factory=list)

    def make_style_line(self) -> str:
        name = tg_escape(str(self.name))
        if self.hops:
            return f"{name} w/ {', '.join(self.hops)}"
        elif self.fruits:
            return f"{name} w/ {', '.join(self.fruits)}"
        else:
            return name


class BeerLine(BaseModel):
    name: str
    brewery: str
    style: BeerStyle
    link: str

    @property
    def style_icon(self) -> str:
        if self.style.name == BeerStyleName.MEAD:
            return "üçØ"
        else:
            return "üç∫"

    def make_beer_line(self) -> str:
        brewery_w_name = tg_escape(f"{self.brewery} ‚Äî {self.name}")
        return f"{self.style_icon} [{brewery_w_name}]({self.link}) ‚Ä¢ _{self.style.make_style_line()}_"


class BeerPost(BaseModel):
    id: int = Field(default=0)
    created: datetime = Field(default_factory=datetime.utcnow)
    beers: list[BeerLine] = Field(default_factory=list)

    def make_post_text(self) -> str:
        return "\n".join(
            [
                "*–ù–æ–≤–∏–Ω–∫–∏*",
                *sorted(beer.make_beer_line() for beer in self.beers),
            ]
        )
