import io

import matplotlib.dates as mdates
import matplotlib.pyplot as plt

from kys_in_rest.core.tg_utils import (
    TgFeature,
    tg_escape,
)
from kys_in_rest.health.entities.weight import WeightEntry
from kys_in_rest.health.features.weight_repo import WeightRepo
from kys_in_rest.tg.entities.input_tg_msg import InputTgMsg
from kys_in_rest.tg.features.bot_msg_repo import BotMsgRepo
from kys_in_rest.users.features.check_admin import CheckTgAdmin


class AddOrShowWeight(TgFeature):
    def __init__(
        self,
        weight_repo: WeightRepo,
        check_tg_admin: CheckTgAdmin,
        bot_msg_repo: BotMsgRepo,
    ):
        self.weight_repo = weight_repo
        self.check_tg_admin = check_tg_admin
        self.bot_msg_repo = bot_msg_repo

    def _create_weight_chart(self, entries: list[WeightEntry]) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ –±–∞–π—Ç—ã"""
        if not entries:
            return None
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
        entries.sort(key=lambda x: x.date)
        
        dates = [entry.date for entry in entries]
        weights = [entry.weight for entry in entries]
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        plt.plot(dates, weights, 'b-o', linewidth=2, markersize=6)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        plt.xlabel('–î–∞—Ç–∞', fontsize=12)
        plt.ylabel('–í–µ—Å (–∫–≥)', fontsize=12)
        plt.title('–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞', fontsize=14, fontweight='bold')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫ –Ω–∞ –æ—Å–∏ X - –º–∞–∫—Å–∏–º—É–º 4-5 –º–µ—Ç–æ–∫
        interval = max(1, len(dates) // 3)
        plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=interval))
        plt.xticks(rotation=45)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
        plt.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å –∫–∞–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
        if entries:
            last_entry = entries[-1]
            plt.annotate(
                f'{last_entry.weight} –∫–≥',
                xy=(last_entry.date, last_entry.weight),
                xytext=(10, 10),
                textcoords='offset points',
                bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7),
                arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0')
            )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        
        return buffer.getvalue()

    async def _send_weight_chart(self, entries: list[WeightEntry], is_update: bool = False) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å—å—é"""
        if not entries:
            await self.bot_msg_repo.send_text(tg_escape("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤–µ—Å–µ. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /weight {–≤–µ—Å}"))
            return

        chart_bytes = self._create_weight_chart(entries)
        if not chart_bytes:
            await self.bot_msg_repo.send_text(tg_escape("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞"))
            return

        last_entry = entries[-1]
        if is_update:
            caption = f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞\n–ù–æ–≤—ã–π –≤–µ—Å: {last_entry.weight} –∫–≥ –æ—Ç {last_entry.date.strftime('%d.%m.%Y')}"
        else:
            caption = f"–ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å: {last_entry.weight} –∫–≥ –æ—Ç {last_entry.date.strftime('%d.%m.%Y')}"
        
        await self.bot_msg_repo.send_photo(chart_bytes, caption)

    async def do_async(self, msg: InputTgMsg) -> None:
        self.check_tg_admin.do(msg.tg_user_id)

        if msg.text:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–µ—Å
            weight = float(msg.text)
            self.weight_repo.add_weight_entry(WeightEntry(weight=weight))
            await self.bot_msg_repo.send_text("–ó–∞–ø–∏—Å–∞–ª üëå")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            entries = self.weight_repo.list_weight_entries()
            await self._send_weight_chart(entries, is_update=True)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
        entries = self.weight_repo.list_weight_entries()
        await self._send_weight_chart(entries, is_update=False)
